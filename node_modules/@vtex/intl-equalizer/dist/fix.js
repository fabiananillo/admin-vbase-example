'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = fix;

var _languages = require('./languages');

var _configure = require('./configure');

var _configure2 = _interopRequireDefault(_configure);

var _errors = require('./errors');

var _errors2 = _interopRequireDefault(_errors);

var _fileReader = require('./fileReader');

var _fileReader2 = _interopRequireDefault(_fileReader);

var _fileWriter = require('./fileWriter');

var _fileWriter2 = _interopRequireDefault(_fileWriter);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fix() {
  const { filesToIgnore, localesDirectory, referenceLocale } = (0, _configure2.default)();

  const availableLanguages = (0, _languages.getAvailableLanguages)({
    directory: localesDirectory,
    filesToIgnore
  });

  if (availableLanguages.error) {
    (0, _errors2.default)(availableLanguages.error, localesDirectory);
  }

  const languages = availableLanguages.generalLocales;

  const termsPerLanguage = (0, _fileReader2.default)({
    languages,
    localesDirectory
  });

  const failedSortLanguages = [];

  const sortedLanguages = languages.reduce((accLanguages, locale) => {
    const localeKeysLength = Object.keys(termsPerLanguage[locale]).length;
    const referenceLocaleKeysLength = Object.keys(termsPerLanguage[referenceLocale]).length;

    if (localeKeysLength !== referenceLocaleKeysLength) {
      console.log(_constants.MESSAGES.ERROR_COULD_NOT_FIX({
        referenceLocale,
        locale,
        referenceLocaleLength: referenceLocaleKeysLength,
        localeLength: localeKeysLength
      }));
      failedSortLanguages.push(locale);
      return _extends({}, accLanguages, {
        [locale]: termsPerLanguage[locale]
      });
    }

    const sortedLanguage = Object.keys(termsPerLanguage[referenceLocale]).reduce((acc, key) => _extends({}, acc, {
      [key]: termsPerLanguage[locale][key]
    }), {});

    return _extends({}, accLanguages, {
      [locale]: sortedLanguage
    });
  }, {});

  (0, _fileWriter2.default)({
    sortedLanguages,
    failedSortLanguages,
    locales: languages,
    localesDirectory,
    referenceLocale
  });

  console.log(_constants.MESSAGES.SUCCESS_FIX);
  process.exit(0);
}