'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _equalizer = require('./equalizer');

var _configure = require('./configure');

var _configure2 = _interopRequireDefault(_configure);

var _errors = require('./errors');

var _errors2 = _interopRequireDefault(_errors);

var _languages = require('./languages');

var _constants = require('./constants');

var _missingKeysTable = require('./missingKeysTable');

var _missingKeysTable2 = _interopRequireDefault(_missingKeysTable);

var _wrongOrderKeysTable = require('./wrongOrderKeysTable');

var _wrongOrderKeysTable2 = _interopRequireDefault(_wrongOrderKeysTable);

var _extraKeysTable = require('./extraKeysTable');

var _extraKeysTable2 = _interopRequireDefault(_extraKeysTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hasExtraKeys(languages, equalizedList) {
  return languages.some(language => equalizedList[language].extraKeys.length !== 0);
}

function start(options = {}) {
  const { referenceLocale, localesDirectory, filesToIgnore } = (0, _configure2.default)();

  const availableLanguages = (0, _languages.getAvailableLanguages)({
    directory: localesDirectory,
    filesToIgnore
  });

  if (availableLanguages.error) {
    (0, _errors2.default)(availableLanguages.error, localesDirectory);
  }

  const languages = availableLanguages.generalLocales;

  const result = (0, _equalizer.equalize)({
    languages,
    localesDirectory,
    referenceLocale
  });

  if (result.error) {
    (0, _errors2.default)(result.error.code, result.error.data);
  }

  if (hasExtraKeys(languages, result)) {
    (0, _extraKeysTable2.default)(result, referenceLocale);
    if (!options.all) process.exit(1);
  }

  const hasMissingTerms = languages.some(language => result[language].missingKeys.length !== 0);

  if (hasMissingTerms) {
    (0, _missingKeysTable2.default)(result, referenceLocale);
    if (!options.all) process.exit(1);
  }

  const hasWrongOrderKeys = languages.some(language => result[language].wrongOrderKeys.length !== 0);

  if (hasWrongOrderKeys) {
    (0, _wrongOrderKeysTable2.default)(result, referenceLocale);
    if (!options.all) process.exit(1);
  }

  let hasExtraKeysRegion = false;
  if (availableLanguages.regionLocales.length > 0) {
    const regionResult = (0, _equalizer.equalizeRegionLocales)({
      regionLocales: availableLanguages.regionLocales,
      localesDirectory,
      referenceLocale
    });

    hasExtraKeysRegion = hasExtraKeys(availableLanguages.regionLocales, regionResult);

    if (hasExtraKeysRegion) {
      (0, _extraKeysTable2.default)(regionResult, referenceLocale);
      if (!options.all) process.exit(1);
    }
  }

  if (options.all && (hasExtraKeys || hasMissingTerms || hasWrongOrderKeys || hasExtraKeysRegion)) {
    process.exit(1);
  }

  console.log(_constants.MESSAGES.SUCCESS);
  process.exit(0);
}

exports.default = start;